/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        td_mt_shift_space: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <130>;
            bindings = <&mt LSHIFT SPACE>, <&kp SPACE>;
        };

        td_lang_us_rus: td_lang_us_rus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LANG_US_RUS";
            #binding-cells = <0>;
            bindings = <&tousa>, <&to_rus>;

            tapping-term-ms = <200>;
        };

        mm_shift_space: mm_shift_space {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SHIFT_SPACE";
            bindings = <&mt LEFT_SHIFT SPACE>, <&kp SPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mm_f5: mm_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_F5";
            bindings = <&kp N5>, <&kp F5>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
    };

    macros {
        changelang: changelang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT_SHIFT)>;
            label = "CHANGELANG";
        };

        tousa: tousa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(NUMBER_1))>;
            label = "TOUSA";
        };

        pw: pw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(J) &kp RPAR &kp N &kp DLLR &kp W &kp N2 &kp RPAR &kp L &kp O &kp C &kp K &kp O &kp B &kp A &kp N &kp K &kp C &kp D &kp M &kp R &kp N7 &kp N2 &kp K &kp X &kp N2 &kp N0 &kp N2 &kp N4 &kp N1>;
            label = "PW";
            wait-ms = <0>;
            tap-ms = <10>;
        };

        pw2: pw2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(V) &kp AT &kp G &kp L &kp Y &kp AT &kp M &kp N0 &kp V &kp N1 &kp N2 &kp N3 &kp N4>;
            label = "PW2";
            tap-ms = <10>;
        };

        to_rus: to_rus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(NUMBER_2))>;
            label = "TO_RUS";
        };

        macro_e_E: macro_e_E {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "MACRO_E_E";
        };

        macro_bracket1: macro_bracket1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "MACRO_BRACKET1";
        };

        macro_bracket2: macro_bracket2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "MACRO_BRACKET2";
        };

        macro_select: macro_select {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp SPACE &kp N1>;
            label = "MACRO_SELECT";
        };

        macro_from: macro_from {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F) &kp LS(R) &kp LS(O) &kp LS(M) &kp SPACE &kp D &kp B &kp O &kp DOT>;
            label = "MACRO_FROM";
        };

        macro_outer_apply: macro_outer_apply {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(O) &kp LS(U) &kp LS(T) &kp LS(E) &kp LS(R) &kp SPACE &kp LS(A) &kp LS(P) &kp LS(P) &kp LS(L) &kp LS(Y) &kp RET &kp LPAR &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp RET &kp RPAR &kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp SPACE &kp N1 &kp RET &kp LS(F) &kp LS(R) &kp LS(O) &kp LS(M) &kp SPACE &kp D &kp B &kp O &kp DOT>;
            label = "MACRO_OUTER_APPLY";
        };

        macro_cross_apply: macro_cross_apply {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(C) &kp LS(R) &kp LS(O) &kp LS(S) &kp LS(S) &kp SPACE &kp LS(A) &kp LS(P) &kp LS(P) &kp LS(L) &kp LS(Y) &kp RET &kp LPAR &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp SPACE &kp N1 &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp LS(F) &kp LS(R) &kp LS(O) &kp LS(M) &kp SPACE &kp RET &kp RPAR>;
            label = "MACRO_CROSS_APPLY";
        };

        macro_ibs: macro_ibs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(J) &kp RPAR &kp N &kp DLLR &kp W &kp N2 &kp RPAR &kp N9 &kp N3 &kp N1 &kp N0 &kp N0 &kp N0>;
            label = "MACRO_IBS";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_g_t_f5 {
            bindings = <&kp F5>;
            key-positions = <29 17>;
        };

        combo_f_shift_minus {
            bindings = <&kp MINUS>;
            key-positions = <28 24>;
        };

        combo_g_h_repeat {
            bindings = <&key_repeat>;
            key-positions = <29 30>;
        };

        combo_t_y_change_lang {
            bindings = <&changelang>;
            key-positions = <17 18>;
        };

        combo_f_j_tousa {
            bindings = <&tousa>;
            key-positions = <28 31>;
        };

        combo_f_tab_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <28 15>;
        };

        combo_f_g_minus {
            bindings = <&kp MINUS>;
            key-positions = <28 27>;
        };

        combo_d_f_altF3 {
            bindings = <&kp F3>;
            key-positions = <28 53>;
        };

        combo_s_d_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <27 26>;
        };

        combo_f_9_bracket1 {
            bindings = <&macro_bracket1>;
            key-positions = <31 20>;
        };

        combo_f_brl_bracket2 {
            bindings = <&macro_bracket2>;
            key-positions = <31 32>;
        };

        combo_j_l_del {
            bindings = <&kp DEL>;
            key-positions = <31 33>;
        };

        combo_j_h_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 30>;
        };

        combo_s_e {
            bindings = <&macro_select>;
            key-positions = <26 15>;
            layers = <1>;
        };

        combo_o_a {
            bindings = <&macro_outer_apply>;
            key-positions = <21 25>;
            layers = <1>;
        };

        combo_c_a {
            bindings = <&macro_cross_apply>;
            key-positions = <25 38>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC         &kp N1  &kp N2  &kp N3              &kp N4            &mm_f5                                                    &kp N6                &kp N7      &kp N8     &kp N9   &kp N0    &kp BACKSPACE
&kp TAB         &kp Q   &kp W   &kp E               &kp R             &kp T                                                     &kp Y                 &kp U       &kp I      &kp O    &kp P     &kp LBKT
&kp LEFT_SHIFT  &kp A   &kp S   &kp D               &kp F             &kp G                                                     &kp H                 &kp J       &kp K      &kp L    &kp SEMI  &kp SQT
&kp EQUAL       &kp Z   &kp X   &kp C               &kp V             &kp B                 &lt 1 BACKSPACE        &kp RGUI     &kp N                 &kp M       &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                                &kp LA(LEFT_SHIFT)  &kp LEFT_CONTROL  &mt LEFT_SHIFT SPACE  &mt LEFT_ALT RETURN    &lt 1 ENTER  &mt LEFT_SHIFT SPACE  &lt 2 LCMD  &kp TILDE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // --------------------------------------------------------------------------------------------------------------
            // | LPAD  | BRDn | BRUp |  MUT |  Vo- |  Vo+ |                   |      |       |       |      |       |       |
            // |  F1   |  F2  |  F3  |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !   |  @   |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |      |      |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                       |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp GRAVE  &kp F1         &kp F2          &kp F3          &kp F4           &kp F5                            &kp F6           &kp F7           &kp F8          &kp F9           &kp F10            &kp F11
&kp GRAVE  &none          &mkp RCLK       &mmv MOVE_UP    &mkp LCLK        &msc SCRL_UP                      &kp HOME         &kp END          &kp UP_ARROW    &kp INS          &kp K_MUTE         &kp F12
&trans     &none          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN                    &kp PAGE_UP      &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LEFT_ALT       &to 2
&trans     &kp BACKSLASH  &kp PIPE        &trans          &trans           &trans          &trans    &trans  &kp PAGE_DOWN    &kp PRINTSCREEN  &kp LEFT_WIN    &kp DEL          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
                                          &trans          &kp LCTRL        &trans          &trans    &trans  &kp RIGHT_SHIFT  &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_CLR    &bt BT_CLR_ALL  &trans  &trans  &trans  &kp K_MUTE                           &kp KP_NUMLOCK  &kp SLASH     &kp ASTRK     &kp MINUS  &macro_ibs  &pw2
&kp CLCK      &trans          &trans  &trans  &trans  &trans                               &kp N7          &kp N8        &kp N9        &kp PLUS   &none       &pw
&trans        &trans          &trans  &trans  &trans  &trans                               &kp NUMBER_4    &kp N5        &kp NUMBER_6  &kp ENTER  &none       &to 0
&out OUT_BLE  &out OUT_USB    &trans  &trans  &trans  &trans      &trans    &kp BACKSPACE  &kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp DEL    &none       &kp BSLH
                                      &trans  &trans  &trans      &trans    &kp N0         &trans          &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
